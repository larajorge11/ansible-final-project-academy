trigger:
    branches:
      include:
        - vm_ansible_modules

variables:
    vmImageName: 'ubuntu-latest'
    vmImageNameWindows: 'windows-latest'
    azureSubscription: 'Visual Studio Professional Subscription(e0fbe937-057c-4d67-9798-ab6191b88603)'

stages:
    - stage: Deploy
      displayName: 'Deploy complete infra with Ansible'
      jobs:
        - job: Deploy
          displayName: 'Deploy complete infra with Ansible'
          pool:
            vmImage: $(vmImageName)
          steps:
            - task: replacetokens@3
              inputs:
                targetFiles: '**/complete_infra.yml'
                encoding: 'auto'
                writeBOM: true
                actionOnMissing: 'warn'
                keepToken: false
                tokenPrefix: '__'
                tokenSuffix: '__'
            - task: Ansible@0
              inputs:
                ansibleInterface: 'agentMachine'
                playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/complete_infra.yml'
                inventoriesAgentMachine: 'file'
                inventoryFileOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/inventory.ini'
                args: '-vv'
                failOnStdErr: false
    - stage: Copy
      condition: succeededOrFailed()
      displayName: 'Copy code to blob'
      jobs:
        - job: Copy
          displayName: 'Copy code to blob'
          pool:
            vmImage: $(vmImageNameWindows)
          steps:
            - task: AzureFileCopy@3
              displayName: 'Copy code to Blob'
              inputs:
                SourcePath: '$(System.DefaultWorkingDirectory)/crud-app/crud.zip'
                azureSubscription: '$(azureSubscription)'
                Destination: 'AzureBlob'
                storage: '$(storageAccountName)'
                ContainerName: '$(containerName)'
            - task: AzureFileCopy@3
              displayName: 'Copy script to Blob'
              inputs:
                SourcePath: '$(System.DefaultWorkingDirectory)/crud-app/script.sh'
                azureSubscription: '$(azureSubscription)'
                Destination: 'AzureBlob'
                storage: '$(storageAccountName)'
                ContainerName: '$(containerName)'
      
    - stage: Config_Web_Server
      condition: succeededOrFailed()
      displayName: 'Config Web Server'
      jobs:
      - job: Config
        displayName: 'Config Web Server'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: replacetokens@3
            displayName: 'Replace Tokens in playbook'
            inputs:
              targetFiles: '**/config_vm_ws.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
          - task: replacetokens@3
            displayName: 'Replace Tokens in inventory'
            inputs:
              targetFiles: '**/hosts-modules'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'

          - task: Ansible@0
            displayName: 'Install Apache with wsgi'
            inputs:
              ansibleInterface: 'agentMachine'
              playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/config_vm_ws.yml'
              inventoriesAgentMachine: 'file'
              inventoryFileOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/hosts-modules'
              args: '-vvv'
              failOnStdErr: false
                
    - stage: Config_DB
      condition: succeededOrFailed()
      displayName: 'Config Database'
      jobs:  
      - job: Config
        displayName: 'Config Database'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: replacetokens@3
            displayName: 'Replace Tokens in playbook'
            inputs:
              targetFiles: '**/config_vm_db.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'
          
          - task: replacetokens@3
            displayName: 'Replace Tokens in inventory'
            inputs:
              targetFiles: '**/hosts-modules'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'

          - task: Ansible@0
            displayName: 'Install mysql db'
            inputs:
              ansibleInterface: 'agentMachine'
              playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/config_vm_db.yml'
              inventoriesAgentMachine: 'file'
              inventoryFileOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/hosts-modules'
              args: '-vvv'
              failOnStdErr: false

    - stage: Deploy_2
      condition: succeededOrFailed()
      displayName: 'Deploy_2'
      jobs:  
      - job: Test
        displayName: 'Deploy_2'
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: replacetokens@3
            displayName: 'Replace Tokens in inventory'
            inputs:
              targetFiles: '**/config_vm_extension.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '__'
              tokenSuffix: '__'

          - task: replacetokens@3
            displayName: 'Replace Tokens in inventory2'
            inputs:
              targetFiles: '**/config_vm_extension.yml'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '&&'
              tokenSuffix: 
              useLegacyPattern: false
              emptyValue: '"'
              enableTelemetry: true

          - task: Ansible@0
            inputs:
              ansibleInterface: 'agentMachine'
              playbookPathOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/config_vm_extension.yml'
              inventoriesAgentMachine: 'file'
              inventoryFileOnAgentMachine: '$(System.DefaultWorkingDirectory)/playbooks/inventory.ini'
              args: '-vvv'
              failOnStdErr: false